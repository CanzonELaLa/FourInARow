1. if a winning move exists - win
2. map out possible threats and rank them according to
    a. sequence length
    b. moves until completion
3. if rank > threshold - remove threat
4. map out own sequences and rank them according to the mentioned
criteria
5. if all ranks are 0, column 4
6. else, make move with best rank
7. conclude with awesome catchphrase

Step 1

Analyze board using:

a list of tuples of 3 containing
the starting location of a sequence (left-upper most chip), a direction (h -
right, v - down, du - up-right, dd - down-right), and sequence length. The list
will include unbound sequences only.

The analysis will contain two lists, one for A.I. sequences, and the other
for rival sequences.

Step 2

Rank each tuple in list according to the following formula:

rank = sequence_length + (4 - steps_to_completion_of_sequence)

steps_to_completion_of_sequence will be calculated by predicting



def backtrack():
    def helper(columns, ranking_dict, depth, pos_column):
        # Recursive function
        # Base: reached depth or timeout reached
        # Try every move until depth
        # Rank each possibility by 3 * num of len 3 + 2 * num of len 2 etc.
        # Give score of +1000 if it achieved a win
        # Return a dict with keys being first move to make (column), and values being
        # score of each path

    dct = helper()
    # Get best key with best score from dict